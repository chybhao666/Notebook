!不要找外援，自己全心全意做
!先看清题目
!想好怎么做，再写代码
!修改代码时注意前后相关的是否都已修改
!要提交的别忘了最后提交
! 参考别人做题情况，先易后难
牛客网上很多题目用暴力递归就行，不用去想复杂的算法。
牛客网的编程，如果少换行，会提示答案不正确，多了空格，会提示格式不符合要求（比如空格和换行与要求不一致）
不要认为难题就该用复杂的数据结构

我的头部：
#include <iostream>
using namespace std;
#include <cstring>
#include <string>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <numeric>
#include <vector>
#include <map>
#include <set>
//#pragma comment(linker, "/STACK:102400000,102400000")
#define EACH(it,a) for(auto it=begin(a);it!=end(a);it++)
#define ALL(a) a.begin(),a.end()
#define MEMA0(a) memset(a,0,sizeof(a))
#define SI(x) ((int)(x).size())
template<typename T>T GCD(T a,T b){ return b?GCD(b,a%b):a; }
#define LL long long
typedef double DB;
typedef vector<int> VI;
#define INF 0x3f3f3f3f
const int    MOD=int(1e9)+7;
const double EPS = 1e-9;
const int    SZ=1002;
int main()
{
    ios_base::sync_with_stdio(0);
#ifdef LJY
    freopen("in.txt","r",stdin);
#endif
    int i,j;

    return 0;
}

用于GCJ：
int main()
{
	ios_base::sync_with_stdio(0);
#ifdef LJY
	freopen("B-small-attempt0.in","r",stdin);
	//freopen("in.txt","r",stdin);
	freopen("out.txt","w",stdout);
#endif
	int i,j;
	int t;
	cin>>t;
	int t0=0;
	while(t0++<t){
		LL ans=0;

		cout<<"Case #"<<t0<<": "<<ans<<endl;
	}
	return 0;
}

#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm> //没有c开头，也没有.h
#include <vector>
#include <string>
#include <map>
#include <set>
#include <cassert>
using namespace std;
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define foreach(it,a) for(typeof((a).begin()) it=(a).begin();it!=(a).end();it++) //vs10不支持typeof，可改为auto
#define all(x) (x).begin(),(x).end()
#define SZ(x) ((int)(x).size())
#define pb push_back
#define mp make_pair
typedef vector<int> VI;
typedef long long ll;
typedef pair<int,int> PII;
template<typename N>N gcd(N a,N b){return b?gcd(b,a%b):a;} //这边的typename也可以换为class
#ifdef JCVB
#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
#define debug(...) 
#endif
const ll mod=1000000007;
const int inf=0x3f3f3f3f;
const double pi    = acos(-1.0);
const double eps   = 1e-9;

xiaodao的头部：
http://www.shuizilong.com/house/archives/asia-hong-kong-online-preliminary/

#include<bits/stdc++.h>包含C++的所有头文件(部分oj支持)

const int INF = 1 << 30;

STL模板列表:
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
#define sz(a) int((a).size())
#define pb push_back
#defile all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())

快速幂取余：
LL mod_pow(LL x,LL n,LL mod) { // x是底数，n是幂数，mod是取余数  
    LL t=1; x%=mod;
    while(n>0){
        if(n & 1) res=res*x%mod;
        x = x*x%mod; n>>=1;
    }
    return t;
}  

以逗号分隔输出：
template<class T>
void PrintSeparate(T t)
{
	static char separator='\a'; //若为\0仍会输出一个空格
	cout<<separator<<t;
	separator=',';
}

打印矩阵格式：
rep(i,0,n) rep(j,0,m){
	printf("%d",d[i][j]);
	if(j==m-1)printf("\n");
	else printf(" ");
}
或
rep(i,0,n) rep(j,0,m)
	printf("%d%c",d[i][j],j==m-1?'\n':' ');

cin，cout速度慢，是因为先把要输出的东西存入缓冲区，再输出，导致效率降低，而这段ios_base::sync_with_stdio(false)可以来打消iostream的输入输出缓存，可以节省许多时间，使效率与scanf与printf相差无几。一旦使用了这条语句，scanf和cin混用可能就会造成一些奇怪的错误。

########## 算法 ##########
##########################
《2013年王道论坛计算机考研机试指南》
最长递增子序列（LIS） dp(i)=max{1,dp[j]+1 | a[j]<a[i] && j<i}
最长公共子序列（LCS） ：
    若S1[x]==S2[y]，那么必存在一个最长公共子串以S1[x]或S2[y]结尾，其他部分等价于S1中前x-1个字符和S2中前y-1个字符的最长公共子串，即dp[x][y]=dp[x-1][y-1]+1。
    若S1[x]！=S2[y]，此时最长公共子串长度为S1中前x-1个字符和S2中前y个字符的最长公共子串长度和S1中前x个字符和S2中前y-1个字符的最长公共子串长度的较大者，即dp[x][y]=max{dp[x-1][y],dp[x][y-1]}。

LIS优化：简单的做法时间复杂度为n^2。保留满足dp[t] = k的所有a[t]中的最小值，即增加D[k] = min{a[t] | (dp[t] = k)} 。在D[]中查找时，可以使用二分查找高效地完成，则整个算法的时间复杂度下降为O(nlogn)。

最长回文串：
方法一、对每个位置向两边查看，对于较难的OJ可能会超时。（为方便奇数长和偶数长两种情况，需先填充）
方法二、与逆串求最长公共子串（不是子序列！），耗空间且时间复杂度高。（S=“abacdfgdcaba”, S′=“abacdgfdcaba”但LCS“abacd”并不是解，需处理）
方法三、Manacher算法，时间复杂度为O(n)。
最长回文子序列：
与逆串求LCS。LCS结果就是要求的结果，想清楚，是dp[s1.size][s2.size]。

《算法概论》
(完全背包问题) 多副本背包 K(w)  =max{K(w-w_i)+v_i}            最大价值dp[w]
(0-1背包问题)  单副本背包 K(w,j)=max{K(w-w_j,j-1),K(w,j-1)}           dp[w][j]
上面两个问题的时间复杂度其实一样。
在《王道考研机试指南》中，完全背包问题可以转为0-1背包问题，也就是让每件物品的数量为V/w_i，但当w_i较小时，时间复杂度太大。
(多重背包)     解决方法是转为0-1背包问题，但有个技巧，将某物品按数量：1,2,4，...，k-2^c+1 来分。
在空间上，背包问题需要一个二维数组存储。由于当前行数据只与上一行有关，所以可以优化为只使用两个一维数组。（比赛时没必要浪费时间去做这样的优化）代码这样写：
	dp[2][W]; now = 0, nxt = 1; ... swap(now, nxt);

1. 以上背包问题都是单个背包，不适用于多个背包问题。
2. 一些物品，不考虑重量，追求价值最接近某个值可用背包。 bool dp[price];
（题目http://hihocoder.com/contest/hihointerview16/problem/1 [Offer收割]编程练习赛4 题目1 : 满减优惠）
（解这个问题也可用递归，分放与不放当前物品分别递归下去,但时间复杂度变高了）

在vs和G++中已有的:
xutility:min(),max()
utility: swap()

memset定义在string.h中

如果最大长度已知，使用数组也许比vector方便省时

调试时反复输入用例麻烦，可以使用freopen(const char *filename, const char *mode, FILE *stream); //其中stream为stdin/stdout

觉得代码没问题，结果却是Wrong Answer，原因可能是该用double或long long存储却用了int，也有可能是输出浮点数的格式问题。

abs(float)会有多个匹配问题。

交换两个等空间的数组时可以采用直接交换两个指针的方式。

觉得要用k重循环（即复杂度为n^k）时，应该采用递归，而不是去k个for循环。

自己想的解法有多次判断时，想想是否有其他方法减少判断次数。
例如：判断当前数在左半部分还是右半部分
      方法一：拿当前位置与中间位置比较，需要考虑总数为奇数偶数的情况，这样麻烦
      方法二：比较当前位置减去最小位置 和 最大位置减去当前位置 那个大

题目描述比较含糊，比如不知道数据范围是正整数还是自然数，这时看看输入部分的描述，也行会有启发。

有n堆水果已按单价从小到大排好，第i堆有m[i]个，每价c[i]，求买a个水果的最小花费
for(i=0;i<n && a>0;;i++){
    cost=min(a,m[i])*c[i]; //Good！
    a-=m[i];
}

while(cin>>a[i++]) ;  对于最后一次cin是什么也读不到的，但那次i自增了。把i++写在{}里比较好。

对于使用到链表的题目（如树），第一步就该是先判断proot是否为NULL

poj上C++代码若使用C语言的输入输出，需#include <stdio.h>

不要在栈上分配10^5以上空间，在全局区分配（若是运行时出错并提示栈错误，很可能就是栈上分配空间超过限制了）

使用memset时，需要#include<string.h> 不加的话在vs10下没问题，但G++会编译错误

自己实验发现‘在vs10中’对于int的输入，cin比scanf和输入外挂快，添加sync_with_stdio没影响

求中位数：
if (n & 0x1)
    return find(n/2 + 1);
else
    return ( find(n/2) + find(n/2 + 1) ) / 2; //当find()较为复杂时，这样写虽然耗时多了，但简化了代码，满足O(n)

Reverse Integer时要考虑超过int表示范围，可以用long long存储
自己实现int转string时要注意，每一位要+'0'，否则0存成ASC II的0，使用strlen时出错。

Leetcode34.Search for a Range在一个有序数组中查找某个值出现的首个位置和末个位置，编写一个函数，添加一个bool参数，这样将搜索左边位置和右边位置代码统一。

分治+递归时:
A(){
    A();
    ...
    A();
}
若大括号中两次A是相乘关系，这时是不能用递归的。例如括号的匹配，(A_1)A_2，A_1中所有情况要分别和A_2中所有情况匹配。要换用其他递归方法。
（https://leetcode.com/problems/generate-parentheses/）


素数筛选法：
bool np[SZ];
for(i=2;i<SZ;i++){
  if(!np[i]){
    for(j=2;i*j<SZ;j++)
      np[i*j]=true;
    }
}

一个有趣的定义：
long long ago;

当自己想的算法时间复杂度为2^n时，很可能能用dp来做，即利用保存下的中间结果

遇到复杂的判断，即要比较A、B，又要比较x、y，交换比较次序可能会变简单。
如求两个有序数组中前k小数，使用二分方法，如先比较两个数组中值大小会很绕，而先比较当前前半部分数据个数与k的大小则较为清楚。

在OJ中如何判断某种情况是否发生了？写个死循环，若发生，会超时。

存储字母对：
1. vector<char> v[26];
2. map<char,set<char>> mp;
3. char ch[26][26];

不要把简单问题复杂化，如合并用vector存储的两个有序数组。用迭代器会遇到空间重新分配而导致的迭代器失效问题，不如1）从后往前合并，或2）另分配一个vector存储结果，之后和原有数组swap。

OJ中，当n超过1e5时，通常时间复杂度要小于n^2

